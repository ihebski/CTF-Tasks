'''
flag : Bugs_Bunny{Baby_Its_Cool_Lik3_school_haHAha}

c:  0x217c8bf9b45601267624c3b1ba89ae93d04c8fae32dc15496262f36f48d06c0dc9e178a77b77a33708dcbe1fcd55ea9eb636fe5684c2f0f08df3389f47b36a128636671eba300491c829ed1e252b1bb4dbb3b93bc46d98a10bb5d55347752052ab45e143fd46799be1d06ac3ff7e8b1eb181dfbba8dfac3910202fd0b9a25befe
E : 266524484526673326121255015126836087453426858655909092116029065652649301962338744664679734617977550306567819672969837450223062478394149960243362563995235387971047857994699247277712682103161537347874310994510059329875060868679654080020041070975648626636209785889112656335054840517934593236597457100751820027783
N : 412460203584740978970185080155274765823237615982150661072746604041385717906706098256415230390148737678989448404730885157667896599397615737297545930957425615121654272472589331747646564634264520011009284080299605233265170506809736069720838542498970453928922703911186788239628906189362646418960560442406497717567
p = 17161999324236539064317754140395642765702739382246098180731387908161141783840551460502918960425597679930951305598922767957529406215641102387965223811833367
q = 24033342257638708824373735251516351694011297880096219691762845250861823504037151195236378659607369447498245214333469418187337738705973799517129078918392601

'''

#!/usr/bin/python  
from Crypto.PublicKey import RSA
import ContinuedFractions,Arithmetic,MillerRabin,random,binascii,time

e = 266524484526673326121255015126836087453426858655909092116029065652649301962338744664679734617977550306567819672969837450223062478394149960243362563995235387971047857994699247277712682103161537347874310994510059329875060868679654080020041070975648626636209785889112656335054840517934593236597457100751820027783
n = 412460203584740978970185080155274765823237615982150661072746604041385717906706098256415230390148737678989448404730885157667896599397615737297545930957425615121654272472589331747646564634264520011009284080299605233265170506809736069720838542498970453928922703911186788239628906189362646418960560442406497717567

def getPrimePair(bits=512):
    assert bits%4==0    
    p = MillerRabin.gen_prime(bits)
    q = MillerRabin.gen_prime_range(p+1, 2*p)
    return p,q

def generateKeys(nbits=1024):
    assert nbits%4==0 
    p,q = getPrimePair(nbits//2)
    n = p*q
    phi = Arithmetic.totient(p, q)
    good_d = False
    while not good_d:
        d = random.getrandbits(nbits//4)
        if (Arithmetic.gcd(d,phi) == 1 and 36*pow(d,4) < n):
            good_d = True           
    e = Arithmetic.modInverse(d,phi)
    return e,n,d
	
def hack_RSA(e,n):  
	print "Wiener's attack RSA"  
	time.sleep(1)  
	frac = ContinuedFractions.rational_to_contfrac(e, n)  
	convergents = ContinuedFractions.convergents_from_contfrac(frac)  
	for (k,d) in convergents:  
	 if k!=0 and (e*d-1)%k == 0:  
	   phi = (e*d-1)//k  
	   s = n - phi + 1  
	   discr = s*s - 4*n  
	   if(discr>=0):  
		 t = Arithmetic.is_perfect_square(discr)  
		 if t!=-1 and (s+t)%2==0:  
		   return d

		   
#generate 
#e,n,d = generateKeys()
#print e,n,d
hacked_d = hack_RSA(e, n)  
print "d=" + str(hacked_d)

c = 0x217c8bf9b45601267624c3b1ba89ae93d04c8fae32dc15496262f36f48d06c0dc9e178a77b77a33708dcbe1fcd55ea9eb636fe5684c2f0f08df3389f47b36a128636671eba300491c829ed1e252b1bb4dbb3b93bc46d98a10bb5d55347752052ab45e143fd46799be1d06ac3ff7e8b1eb181dfbba8dfac3910202fd0b9a25befe
d=  27979163639208238097581493168255260980791785886427784936313524512033423912647
m = hex(pow(c,d,n))
print(binascii.unhexlify(m[2:-1]).decode())
